<div class="container">
    <h1>Sistema de Votación de la Nación</h1>
    
    <div class="confirmation-card">
        <h2>Votación</h2>
        
        <div class="party-header">
            <h3>La Libertad Avanza</h3>
        </div>

        <div class="candidate-details">
            <div class="candidate-role">
                <h4>Presidente</h4>
                <div class="candidate">
                    <img src="/src/assets/images/milei.png" alt="Javier Milei" class="candidate-image" />
                    <span>Javier Milei</span>
                </div>
            </div>

            <div class="candidate-role">
                <h4>Vicepresidente</h4>
                <div class="candidate">
                    <img src="/src/assets/images/villarruel.png" alt="Victoria Villarruel" class="candidate-image" />
                    <span>Victoria Villarruel</span>
                </div>
            </div>

            <div class="candidate-role">
                <h4>Cargo</h4>
                <div class="candidate">
                    <img src="/" alt="Nombre y Apellido" class="candidate-image" />
                    <span>Nombre y Apellido</span>
                </div>
            </div>
        </div>

        <button class="vote-button">Votar</button>
    </div>
</div>

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
    }

    .confirmation-card {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 500px;
    }

    h1, h2 {
        text-align: center;
        margin-bottom: 2rem;
    }

    .party-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .candidate-details {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .candidate-role {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .candidate {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.5rem;
        border: 1px solid #eee;
        border-radius: 0.5rem;
    }

    .candidate-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    .vote-button {
        width: 100%;
        padding: 0.75rem;
        background-color: #4A90E2;
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        cursor: pointer;
    }

    .vote-button:hover {
        background-color: #357ABD;
    }

    .vote-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
</style>

<script>
    import { ethers } from 'ethers';
    import type { Voting } from '../../contracts/typechain-types';
    import { abi } from '../../contracts/artifacts/contracts/Voting.sol/Voting.json';

    declare global {
        interface Window {
            ethereum: any;
        }
    }

    let votingContract: any;
    let provider: any;
    let signer: any;

    async function initializeContract() {
        try {
            if (typeof window.ethereum !== 'undefined') {
                // Solicitar conexión a MetaMask
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                
                provider = new ethers.BrowserProvider(window.ethereum);
                signer = await provider.getSigner();
                
                const contractAddress = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0";
                votingContract = new ethers.Contract(contractAddress, abi, signer);
                return true;
            } else {
                alert('Por favor, instala MetaMask para votar');
                return false;
            }
        } catch (error) {
            console.error('Error al inicializar el contrato:', error);
            alert('Error al conectar con la blockchain');
            return false;
        }
    }

    async function handleVote() {
        try {
            const voteButton = document.querySelector('.vote-button') as HTMLButtonElement;
            if (voteButton) {
                voteButton.disabled = true;
                voteButton.textContent = 'Procesando voto...';
            }

            const initialized = await initializeContract();
            if (!initialized) {
                throw new Error('No se pudo inicializar el contrato');
            }

            // Obtener el ID del candidato de la URL o localStorage
            const candidateId = 1; // Por ahora hardcodeado, deberías obtenerlo de donde corresponda
            const tx = await votingContract.vote(candidateId);
            await tx.wait();

            window.location.href = '/voto-registrado';
        } catch (error) {
            console.error('Error al votar:', error);
            alert('Error al procesar tu voto');
            
            const voteButton = document.querySelector('.vote-button') as HTMLButtonElement;
            if (voteButton) {
                voteButton.disabled = false;
                voteButton.textContent = 'Votar';
            }
        }
    }

    const voteButton = document.querySelector('.vote-button');
    if (voteButton) {
        voteButton.addEventListener('click', handleVote);
    }
</script> 