<div class="container">
    <h1>Bienvenido al sistema de Votaci√≥n de la Naci√≥n</h1>
    
    <div class="validador-card">
        <h2>Validador de Identidad</h2>
        
        <div class="input-group">
            <label for="dni">DNI</label>
            <input type="text" id="dni" name="dni" placeholder="Ingrese su n√∫mero de DNI" />
        </div>

        <div class="status-container">
            <div id="dni-status" class="status-item">
                <span class="status-icon">‚è≥</span>
                <span class="status-text">DNI no validado</span>
            </div>
            <div id="photo-status" class="status-item">
                <span class="status-icon">‚è≥</span>
                <span class="status-text">Fotos no validadas</span>
            </div>
        </div>

       <div id="qr-container" class="qr-container">
            <h3>Escanea el c√≥digo QR con tu celular</h3>
            <div id="qrcode"></div>
            <p class="qr-instructions">1. Escanea el c√≥digo QR con tu celular<br>
               2. Toma una foto de tu DNI<br>
               3. Toma una selfie<br>
               4. Espera la validaci√≥n</p>
        </div> 

        <div id="mobile-status" class="mobile-status" style="display: none;">
            <p>Conectado al celular</p>
            <div class="loading-spinner"></div>
        </div>

        <div class="buttons-container">
            <div class="photo-options">
                <h3>Foto del DNI</h3>
                <div class="photo-buttons">
                    <button class="photo-button" id="cameraDni">
                        <span>üì∑</span>
                        <p>Tomar foto del DNI</p>
                    </button>
                    <button class="photo-button" id="uploadDni">
                        <span>üìÅ</span>
                        <p>Subir foto del DNI</p>
                    </button>
                </div>
            </div>
            <div class="photo-options">
                <h3>Foto Personal</h3>
                <button class="photo-button" id="cameraSelfie">
                    <span>üì∑</span>
                    <p>Tomar Selfie</p>
                </button>
            </div>
        </div>

        <div id="preview-container" class="preview-container" style="display: none;">
            <img id="preview-image" src="" alt="Vista previa" />
            <button id="retake-photo" class="retake-button">Volver a tomar</button>
        </div>

        <div id="camera-container" class="camera-container" style="display: none;">
            <video id="camera-preview" autoplay playsinline></video>
            <button id="capture-photo" class="capture-button">Capturar Foto</button>
            <button id="cancel-camera" class="cancel-button">Cancelar</button>
        </div>

        <button class="validate-button">Validarme</button>
    </div>
</div>

<script>
    console.log('Script iniciando...');

    // Importaciones din√°micas
    let Tesseract;
    let faceapi;
    import { toCanvas } from 'qrcode';
    import { io } from 'socket.io-client';

    // Cargar m√≥dulos
    async function loadModules() {
        try {
            Tesseract = await import('tesseract.js');
            faceapi = await import('face-api.js');
            console.log('M√≥dulos cargados correctamente');
        } catch (error) {
            console.error('Error al cargar m√≥dulos:', error);
        }
    }

    // Variables globales
    let currentPhotoType = null;
    let stream = null;
    let dniImage = null;
    let selfieImage = null;
    let dniNumber = '';
    let modelsLoaded = false;
    let socket;
    let sessionId;

    // Cargar modelos de face-api
    async function loadModels() {
        if (!modelsLoaded && faceapi) {
            try {
                await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');
                await faceapi.nets.faceLandmark68Net.loadFromUri('/models');
                await faceapi.nets.faceRecognitionNet.loadFromUri('/models');
                modelsLoaded = true;
                console.log('Modelos cargados correctamente');
            } catch (error) {
                console.error('Error al cargar modelos:', error);
                alert('Error al cargar los modelos de reconocimiento facial');
            }
        }
    }

    // Funci√≥n para detectar y extraer el descriptor facial
    async function getFaceDescriptor(imageData: string): Promise<Float32Array | null> {
        try {
            const img = await faceapi.fetchImage(imageData);
            const detections = await faceapi.detectSingleFace(img)
                .withFaceLandmarks()
                .withFaceDescriptor();

            if (!detections) {
                throw new Error('No se detect√≥ un rostro en la imagen');
            }

            return detections.descriptor;
        } catch (error) {
            console.error('Error al detectar rostro:', error);
            return null;
        }
    }

    // Funci√≥n para comparar descriptores faciales
    function compareFaceDescriptors(desc1: Float32Array, desc2: Float32Array): number {
        return faceapi.euclideanDistance(desc1, desc2);
    }

    // Funci√≥n para actualizar el estado de validaci√≥n
    function updateValidationStatus(type: 'dni' | 'photo', status: 'pending' | 'valid' | 'invalid', message: string) {
        const statusElement = document.getElementById(`${type}-status`);
        if (statusElement) {
            const icon = statusElement.querySelector('.status-icon');
            const text = statusElement.querySelector('.status-text');
            
            if (icon && text) {
                switch (status) {
                    case 'pending':
                        icon.textContent = '‚è≥';
                        break;
                    case 'valid':
                        icon.textContent = '‚úÖ';
                        break;
                    case 'invalid':
                        icon.textContent = '‚ùå';
                        break;
                }
                text.textContent = message;
            }
        }
    }

    // Generar ID de sesi√≥n √∫nico
    function generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    // Inicializar QR
    async function initializeQR() {
        sessionId = generateSessionId();
        const qrData = `http://votacion-blockchain.vercel.app/mobile?sessionId=${sessionId}`;
        
        try {
            const qrElement = document.getElementById('qrcode');
            if (!qrElement) {
                console.error('No se encontr√≥ el elemento qrcode');
                return;
            }
            // Limpiar el contenedor antes de generar el nuevo QR
            qrElement.innerHTML = '';
            // Crear un canvas y agregarlo al contenedor
            const canvas = document.createElement('canvas');
            qrElement.appendChild(canvas);
            // Renderizar el QR en el canvas
            await toCanvas(canvas, qrData, {
                width: 200,
                margin: 1,
                color: {
                    dark: '#000000',
                    light: '#ffffff'
                }
            });
            console.log('QR generado exitosamente');
        } catch (err) {
            console.error('Error generando QR:', err);
        }
    }

    // Inicializar Socket.IO
    function initializeSocket() {
        socket = io(window.location.origin);

        socket.on('connect', () => {
            console.log('Conectado al servidor');
        });

        socket.on('mobile-connected', () => {
            document.getElementById('mobile-status').style.display = 'block';
            document.getElementById('qr-container').style.display = 'none';
        });

        socket.on('photos-received', async (data) => {
            dniImage = data.dniImage;
            selfieImage = data.selfieImage;
            
            // Actualizar estado visual
            document.getElementById('dni-status').querySelector('.status-icon').textContent = '‚úÖ';
            document.getElementById('photo-status').querySelector('.status-icon').textContent = '‚úÖ';
            
            // Habilitar bot√≥n de validaci√≥n
            (document.querySelector('.validate-button') as HTMLButtonElement).disabled = false;
        });

        socket.on('disconnect', () => {
            document.getElementById('mobile-status').style.display = 'none';
            document.getElementById('qr-container').style.display = 'block';
        });
    }

    // Funci√≥n para validar la identidad
    async function validateIdentity() {
        if (!dniImage || !selfieImage || !dniNumber) {
            alert('Por favor, complete todos los campos requeridos');
            return;
        }

        const validateButton = document.querySelector('.validate-button') as HTMLButtonElement;

        try {
            validateButton.disabled = true;
            validateButton.textContent = 'Validando...';

            const response = await fetch('/api/validar-usuario', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dni: dniNumber,
                    selfieImage: selfieImage
                })
            });

            const data = await response.json();

            if (!data.success) {
                alert(data.message);
                validateButton.disabled = false;
                validateButton.textContent = 'Validarme';
                return;
            }

            alert('¬°Identidad validada con √©xito!');
            window.location.href = '/votacion';

        } finally {
            validateButton.disabled = false;
            validateButton.textContent = 'Validarme';
        }
    }

    // Funci√≥n para extraer texto de la imagen usando Tesseract
    async function extractTextFromImage(imageData: string): Promise<string> {
        try {
            const result = await Tesseract.recognize(
                imageData,
                'spa', // Idioma espa√±ol
                {
                    logger: m => console.log(m)
                }
            );
            return result.data.text;
        } catch (error) {
            console.error('Error al extraer texto:', error);
            throw new Error('No se pudo extraer el texto de la imagen');
        }
    }

    // Funci√≥n para manejar la captura de foto
    async function handleCameraCapture(photoType: string) {
        console.log('Iniciando captura de c√°mara:', photoType);
        try {
            stream = await navigator.mediaDevices.getUserMedia({ 
                video: photoType === 'selfie' ? { facingMode: 'user' } : true 
            });
            
            const video = document.getElementById('camera-preview') as HTMLVideoElement;
            if (video) {
                video.srcObject = stream;
                document.getElementById('camera-container').style.display = 'block';
                currentPhotoType = photoType;
            }
        } catch (error) {
            console.error('Error al acceder a la c√°mara:', error);
            alert('No se pudo acceder a la c√°mara. Por favor, aseg√∫rese de dar los permisos necesarios.');
        }
    }

    // Funci√≥n para capturar la foto
    function capturePhoto() {
        console.log('Capturando foto...');
        const video = document.getElementById('camera-preview') as HTMLVideoElement;
        if (!video) return;

        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        
        if (ctx) {
            ctx.drawImage(video, 0, 0);
            const imageData = canvas.toDataURL('image/jpeg');
            const previewImage = document.getElementById('preview-image') as HTMLImageElement;
            if (previewImage) {
                previewImage.src = imageData;

                // Guardar la imagen seg√∫n el tipo
                if (currentPhotoType === 'dni') {
                    dniImage = imageData;
                } else if (currentPhotoType === 'selfie') {
                    selfieImage = imageData;
                }

                // Detener la c√°mara y ocultar el contenedor
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                document.getElementById('camera-container').style.display = 'none';
                document.getElementById('preview-container').style.display = 'block';
            }
        }
    }

    // Funci√≥n para manejar la subida de archivo
    function handleFileUpload(photoType: string) {
        console.log('Iniciando subida de archivo:', photoType);
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        
        input.onchange = (e) => {
            const target = e.target as HTMLInputElement;
            const file = target.files?.[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const imageData = event.target?.result as string;
                    const previewImage = document.getElementById('preview-image') as HTMLImageElement;
                    if (previewImage) {
                        previewImage.src = imageData;
                        document.getElementById('preview-container').style.display = 'block';
                        
                        // Guardar la imagen seg√∫n el tipo
                        if (photoType === 'dni') {
                            dniImage = imageData;
                        }
                    }
                };
                reader.readAsDataURL(file);
            }
        };
        
        input.click();
    }

    // Funci√≥n para cancelar la captura
    function cancelCamera() {
        console.log('Cancelando captura...');
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        document.getElementById('camera-container').style.display = 'none';
    }

    // Funci√≥n para volver a tomar la foto
    function retakePhoto() {
        console.log('Volviendo a tomar foto...');
        document.getElementById('preview-container').style.display = 'none';
    }

    // Funci√≥n para configurar los event listeners
    function setupEventListeners() {
        console.log('Configurando event listeners...');
        
        // Botones de DNI
        const cameraDniBtn = document.getElementById('cameraDni');
        const uploadDniBtn = document.getElementById('uploadDni');
        const cameraSelfieBtn = document.getElementById('cameraSelfie');
        const capturePhotoBtn = document.getElementById('capture-photo');
        const cancelCameraBtn = document.getElementById('cancel-camera');
        const retakePhotoBtn = document.getElementById('retake-photo');
        const validateBtn = document.querySelector('.validate-button');
        const dniInput = document.getElementById('dni');

        console.log('Elementos encontrados:', {
            cameraDniBtn: !!cameraDniBtn,
            uploadDniBtn: !!uploadDniBtn,
            cameraSelfieBtn: !!cameraSelfieBtn,
            capturePhotoBtn: !!capturePhotoBtn,
            cancelCameraBtn: !!cancelCameraBtn,
            retakePhotoBtn: !!retakePhotoBtn,
            validateBtn: !!validateBtn,
            dniInput: !!dniInput
        });

        // Botones de DNI
        cameraDniBtn?.addEventListener('click', () => {
            console.log('Bot√≥n c√°mara DNI clickeado');
            handleCameraCapture('dni');
        });
        
        uploadDniBtn?.addEventListener('click', () => {
            console.log('Bot√≥n subir DNI clickeado');
            handleFileUpload('dni');
        });
        
        // Bot√≥n de selfie
        cameraSelfieBtn?.addEventListener('click', () => {
            console.log('Bot√≥n selfie clickeado');
            handleCameraCapture('selfie');
        });
        
        // Botones de c√°mara
        capturePhotoBtn?.addEventListener('click', () => {
            console.log('Bot√≥n capturar clickeado');
            capturePhoto();
        });
        
        cancelCameraBtn?.addEventListener('click', () => {
            console.log('Bot√≥n cancelar clickeado');
            cancelCamera();
        });
        
        retakePhotoBtn?.addEventListener('click', () => {
            console.log('Bot√≥n retomar clickeado');
            retakePhoto();
        });
        
        // Campo DNI
        dniInput?.addEventListener('input', (e) => {
            dniNumber = (e.target as HTMLInputElement).value;
        });
        
        // Bot√≥n de validaci√≥n
        validateBtn?.addEventListener('click', validateIdentity);
    }

    // Inicializaci√≥n
    async function initialize() {
        console.log('Inicializando...');
        await loadModules();
        await loadModels();
        setupEventListeners();
        await initializeQR();
        initializeSocket();
        console.log('Inicializaci√≥n completada');
    }

    // Iniciar cuando el DOM est√© listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        initialize();
    }

    // Tambi√©n intentar con el evento de Astro
    document.addEventListener('astro:page-load', initialize);

    console.log('Script cargado completamente');
</script>

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
    }

    .validador-card {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    h1 {
        text-align: center;
        margin-bottom: 2rem;
    }

    h2 {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .input-group {
        margin-bottom: 1.5rem;
    }

    input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 0.5rem;
        font-size: 1rem;
        margin-top: 0.5rem;
    }

    input:focus {
        outline: none;
        border-color: #4A90E2;
        box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
    }

    .buttons-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .photo-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        border: 2px dashed #ccc;
        border-radius: 0.5rem;
        background: none;
        cursor: pointer;
    }

    .photo-button span {
        font-size: 2rem;
        color: #666;
    }

    .photo-button p {
        margin: 0;
        font-size: 0.8rem;
        color: #666;
        text-align: center;
    }

    .validate-button {
        width: 100%;
        padding: 0.75rem;
        background-color: #4A90E2;
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        cursor: pointer;
    }

    .validate-button:hover {
        background-color: #357ABD;
    }

    .validate-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .photo-options {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .photo-options h3 {
        font-size: 1rem;
        margin: 0;
        color: #333;
    }

    .photo-buttons {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.5rem;
    }

    .preview-container {
        margin: 1rem 0;
        text-align: center;
    }

    .preview-container img {
        max-width: 100%;
        max-height: 200px;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .retake-button {
        padding: 0.5rem 1rem;
        background-color: #666;
        color: white;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
    }

    .retake-button:hover {
        background-color: #555;
    }

    .camera-container {
        margin: 1rem 0;
        text-align: center;
    }

    #camera-preview {
        width: 100%;
        max-width: 400px;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }

    .capture-button {
        padding: 0.75rem 1.5rem;
        background-color: #4A90E2;
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        cursor: pointer;
        margin-right: 0.5rem;
    }

    .capture-button:hover {
        background-color: #357ABD;
    }

    .cancel-button {
        padding: 0.75rem 1.5rem;
        background-color: #666;
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        cursor: pointer;
    }

    .cancel-button:hover {
        background-color: #555;
    }

    .status-container {
        margin: 1rem 0;
        padding: 1rem;
        background-color: #f5f5f5;
        border-radius: 0.5rem;
    }

    .status-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .status-item:last-child {
        margin-bottom: 0;
    }

    .status-icon {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }

    .status-text {
        font-size: 0.9rem;
        color: #666;
    }

    .qr-container {
        text-align: center;
        margin: 2rem 0;
        padding: 1rem;
        background: #f5f5f5;
        border-radius: 0.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #qrcode {
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }

    .qr-instructions {
        margin-top: 1rem;
        color: #666;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .mobile-status {
        text-align: center;
        margin: 1rem 0;
        padding: 1rem;
        background: #e8f5e9;
        border-radius: 0.5rem;
        color: #2e7d32;
    }

    .loading-spinner {
        width: 30px;
        height: 30px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #2e7d32;
        border-radius: 50%;
        margin: 1rem auto;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style> 